name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master, JPyke3-CI-Testing ]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: manjarolinux/base
      env:
        PKGDEST: /home/builder/packages
    defaults:
      run:
        shell: bash
    steps:
      - run: pacman -Syu git fakeroot bc docbook-xsl elfutils inetutils kmod xmlto base-devel gnupg --noconfirm
        name: Update image and Download Depends
      - uses: actions/checkout@v2
        name: Checkout the Repository
      - run: useradd -m builder
        name: Add Builder User
      - run: cp -r /__w/"$(echo -e "$GITHUB_REPOSITORY" | sed 's/.*\///g')"/"$(echo -e "$GITHUB_REPOSITORY" | sed 's/.*\///g')" /home/builder/
        name: Copy Repository to Builder Home Directory
      - run: mkdir -p /home/builder/packages
        name: Create final package location
      - run: chown builder:builder -R /home/builder
        name: Give the builder user ownership of it's own home dir
      - name: Import GPG key CD to makepkg dir and compile the kernel
        run: |
          su builder -c\
          "export GPG_TTY=$(tty);\
          cd /home/builder/"$(echo -e "$GITHUB_REPOSITORY" | sed 's/.*\///g')";\
          makepkg -s"
      - uses: actions/upload-artifact@v2
        name: Generate Artifacts
        if: ${{ always() }}
        with:
          name: Unsigned-Files
          path: /home/builder/packages/
  
  sign:
    needs: [build]
    runs-on: ubuntu-latest
    container:
      image: manjarolinux/base
      env:
        PKGDEST: /home/builder/packages
    defaults:
      run:
        shell: bash
    steps:
    - name: pacman -Syu zip unzip gnupg
    - run: mkdir -p /root/artifact
      name: Create filestructure for signing
    - uses: actions/download-artifact@v2
      with:
        name: artifact.zip
        path: /root/artifact
    - run: echo -e "${{ secrets.GPG_SECRET}}" >> /root/key.gpg
      name: Export GPG key from secret to a file
    - name: Import GPG key to keyring
      run: export GPG_TTY=$(tty); gpg --import --batch --passphrase "${{ secrets.GPG_PASS }}" /root/key.gpg
    - run: unzip /root/artifact/artifact.zip
      name: Unzip the artifact file
    - run: cd /root/artifact; rm artifact.zip; 
      name: Remove zip file
    - run: gpg --sign --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASS }}" --no-armor *.tar.xz
    - uses: actions/upload-artifact@v2
      with:
        name: Signed-Files
        path: /root/artifact/*.tar.xz
    
